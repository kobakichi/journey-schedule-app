generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DaySchedule {
  id        Int            @id @default(autoincrement())
  date      DateTime
  title     String?
  notes     String?
  items     ScheduleItem[]
  user      User?          @relation(fields: [userId], references: [id])
  userId    Int?
  shares    ScheduleShare[]
  shareInvites ScheduleShareInvite[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([userId, date])
}

model ScheduleItem {
  id         Int         @id @default(autoincrement())
  schedule   DaySchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId Int
  title      String
  emoji      String?
  color      String?     @default("#FFD1DC")
  startTime  DateTime
  endTime    DateTime?
  location   String?
  kind       ItemKind    @default(GENERAL)
  departurePlace String?
  arrivalPlace   String?
  notes      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([scheduleId, startTime])
}

model User {
  id        Int           @id @default(autoincrement())
  googleId  String        @unique
  email     String?       @unique
  name      String?
  avatarUrl String?
  publicSlug String?      @unique
  createdAt DateTime      @default(now())
  schedules DaySchedule[]
  receivedShares ScheduleShare[] @relation("UserReceivedShares")
  redeemedInvites ScheduleShareInvite[]
}

enum ItemKind {
  GENERAL
  MOVE
}

model ScheduleShare {
  id                Int         @id @default(autoincrement())
  schedule          DaySchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId        Int
  sharedWith        User        @relation("UserReceivedShares", fields: [sharedWithUserId], references: [id], onDelete: Cascade)
  sharedWithUserId  Int
  canEdit           Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([scheduleId, sharedWithUserId])
}

model ScheduleShareInvite {
  id               Int         @id @default(autoincrement())
  schedule         DaySchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId       Int
  token            String      @unique
  invitedEmail     String?
  canEdit          Boolean     @default(false)
  expiresAt        DateTime?
  redeemedAt       DateTime?
  redeemedBy       User?       @relation(fields: [redeemedByUserId], references: [id])
  redeemedByUserId Int?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@index([scheduleId])
}
